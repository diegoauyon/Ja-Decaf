class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

class Program{
	
	int a;
	
	struct A {
		int a;
		char b[5];
		boolean c;
	}
	
		
	void main(){
		int b;
		if((true && 1!=(5+5)) || (1<2)){
			char b;
			a = 0;
			b = 'a';
		}else{
			b = 5;
			a = 1;
		}
		a = suma(2,5) + factorial(2);
	}

		void expresiones(){
		
		boolean b;
		
		b = true;
		
		a = 1*2+3*(4+3/2);
		a = a + 2*3;
		a = -1;
		
		b = (1<(suma(1,1)) || b);
		
		if(b){
			if(b!=true){
				a = 5;
			}
			else{
				a = 4;
			}
		}else{
			a = 3;
		}
		
	}

		int suma(int num1, int num2){
		
		int resultado;
		resultado = num1+num2;
		return resultado;
	}
	
		void arreglos(){
		
		char b[5];
		boolean c;
		
		b[0]='0';
		
		b[1+2]='1';
		
		b[suma(1,2)] = '2';
		
		a = 3;
		
		c = true && !(factorial(a)<=5);
		
	}
	
		void estructura(){
		char a;
		struct A b[2];
		b[1].a = b[0].a;
	}
	
		void estructura2(){
		int j;
		struct B {
			int c;
			struct A a[3];
			int b;
		} b;
		
		b.a[1].a = 1;
		b.a[1].b[0] = 'a';
		
		
		j = b.b + b.a[2].a +1*5+6;
		j = b.b + 1;
		
	}
	
	
	int factorial(int n){
		if(n == 1 || n == 0 ){
			return 1;
		}else{
			return (n * factorial(n-1));
		}
	}
	
		int fibonacci(int num){
		if(num == 1 || num == 2){
			return 1;
		}
		else{
			return ((fibonacci(num-1) + fibonacci(num-2)));
		}
	}
		int Ackermann(int m, int n){
		if(m==0){
			return n+1;
		}
		if(m > 0 && n==0){
			return Ackermann(m-1,1);
		}
		if(m > 0 && n > 0){
			return Ackermann(m-1, Ackermann(m,n-1));
		}
		return 0;
	}
}

