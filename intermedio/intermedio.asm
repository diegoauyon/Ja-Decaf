//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//               Ámbito global
//a = global[0]
//b = global[1]
//c = global[2]
//vs2 = global[3]
//prueba2 = global[11]
//d = global[20]
//vs1 = global[21]
//array = global[29]
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


//*******************************************
//Método: tryout
//Tipo de retorno: int
//param: t1 = stack[0]
//param: t3 = stack[1]
//t|_1 = stack[2]
//t|_2 = stack[3]
//*******************************************
tryout proc near
//--- <assign> ----------------------------
	//°°° <location> - structure °°°°
	t|_1 = 1 + 0
	t|_2 = 11 + t|_1
	//°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
	global[t|_2] = 1
//-----------------------------------------
//--- <assign> ----------------------------
	//°°° <location> - structure °°°°
	t|_1 = 5 * 1
	t|_1 = t|_1 + 1
	t|_2 = 3 + t|_1
	//°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
	global[t|_2] = 0
//-----------------------------------------
	return 1
	goto E_tryout_$
E_tryout_$:
	ret
tryout endp
//*******************************************


//*******************************************
//Método: tryout|0
//Tipo de retorno: char
//param: t2 = stack[0]
//t|_1 = stack[1]
//t|_2 = stack[2]
//*******************************************
tryout|0 proc near
//--- <assign> ----------------------------
	//°°° <location> - structure °°°°
	t|_1 = 8 * 1
	t|_1 = t|_1 + 29
	t|_2 = t|_1 + 0
	//°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
	global[t|_2] = 2
//-----------------------------------------
	return 'c'
	goto E_tryout|0_$
E_tryout|0_$:
	ret
tryout|0 endp
//*******************************************


//*******************************************
//Método: getBool
//Tipo de retorno: boolean
//methoda = stack[0]
//methodb = stack[1]
//methodc = stack[3]
//t|_1 = stack[4]
//t|_2 = stack[5]
//*******************************************
getBool proc near
//--- <assign> ----------------------------
	//+++ <metodoCall> ++++++++++++++
	t|_2 = 1 + 1
	param t|_2, tryout, 1
	param 2, tryout, 2
	t|_1 = call tryout, 2
	//+++++++++++++++++++++++++++++++
	stack[0] = t|_1
//-----------------------------------------
//--- <assign> ----------------------------
	stack[3] = 'c'
//-----------------------------------------
//--- <assign> ----------------------------
	//+++ <metodoCall> ++++++++++++++
	t|_1 = call getBool, 0
	//+++++++++++++++++++++++++++++++
	//°°° <location> - array °°°°°°°°
	t|_2 = 1 * 1
	t|_2 = t|_2 + 1
	//°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
	stack[t|_2] = t|_1
//-----------------------------------------
//### if(<exp>) <block1> else <block2> ####
	if 1 < 2 goto E_getBool_2
	t|_1 = 0
	goto E_getBool_3
E_getBool_2:
	t|_1 = 1
E_getBool_3:
	if t|_1 == 0 goto E_getBool_0
//### <block1> ############################
//--- <assign> ----------------------------
	stack[0] = 1
//-----------------------------------------
	return 1
	goto E_getBool_$
	goto E_getBool_1
E_getBool_0:
//### <block2> - else #####################
	return 0
	goto E_getBool_$
E_getBool_1:
//#########################################
E_getBool_$:
	ret
getBool endp
//*******************************************


//*******************************************
//Método: main
//Tipo de retorno: void
//*******************************************
main proc near
E_main_$:
	ret
main endp
//*******************************************


